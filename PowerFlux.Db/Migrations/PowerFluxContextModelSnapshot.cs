// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PowerFlux.Db.DbContexts;

namespace PowerFlux.Db.Migrations
{
    [DbContext(typeof(PowerFluxContext))]
    partial class PowerFluxContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("PowerFlux.Db.ModelsDb.DbAlloyingElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartialTransformationToFerroalloyEquation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartialTransformationToGasEquation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartialTransformationToKernelEquation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartialTransformationToSlagEquation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AlloyingElements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Manganum",
                            PartialTransformationToFerroalloyEquation = "1.30 - 2.15 * (P / S)",
                            PartialTransformationToGasEquation = "1.41 - 2.65 * (P / S)",
                            PartialTransformationToKernelEquation = "1.83 - 4.32 * (P / S)",
                            PartialTransformationToSlagEquation = "0",
                            Symbol = "Mn"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Silicium",
                            PartialTransformationToFerroalloyEquation = "0.67 - 1.40 * (P / S)",
                            PartialTransformationToGasEquation = "0.85 - 2.0 * (P / S)",
                            PartialTransformationToKernelEquation = "0.85 - 2.0 * (P / S)",
                            PartialTransformationToSlagEquation = "0",
                            Symbol = "Si"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Carboneum",
                            PartialTransformationToFerroalloyEquation = "2.81 - 6.86 * (P / S)",
                            PartialTransformationToGasEquation = "1.20 - 1.59 * (P / S)",
                            PartialTransformationToKernelEquation = "1.24 - 1.53 * (P / S)",
                            PartialTransformationToSlagEquation = "0",
                            Symbol = "C"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Titanium",
                            PartialTransformationToFerroalloyEquation = "0",
                            PartialTransformationToGasEquation = "(25.9 * (P / S) - 2.74) * 0,0001",
                            PartialTransformationToKernelEquation = "0",
                            PartialTransformationToSlagEquation = "(25.9 * (P / S) - 2.74) * 0,0001",
                            Symbol = "Ti"
                        });
                });

            modelBuilder.Entity("PowerFlux.Db.ModelsDb.DbSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("DispleedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Id", "Key");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DispleedName = "Max value of coating mass coefficient",
                            Key = "coatingMassCoefficient.max",
                            Value = "0.45"
                        },
                        new
                        {
                            Id = 2,
                            DispleedName = "Min value of coating mass coefficient",
                            Key = "coatingMassCoefficient.min",
                            Value = "0.35"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
